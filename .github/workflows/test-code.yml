# This is a basic workflow to help you get started with GitHub Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Global environment variables that are available to all jobs
env:
  GLOBAL_VARIABLE: global_value

# A workflow run is made up of one or more jobs
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Job-level environment variables
    env:
      JOB_VARIABLE: job_value

    # Steps represent a sequence of tasks to be executed as part of the job
    steps:

      # Show a secret value (for testing purposes only; don't do this in production)
      - name: Print secret
        run: echo "my secret is ${{ secrets.supersecret }}"

      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install the Python version we want to use
      - name: Set up Python 3.10.16
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.16'

      # Install pipx (useful for globally installing Python tools like Poetry)
      - name: Install pipx (needed for Poetry)
        run: python -m pip install --user pipx && python -m pipx ensurepath

      # Install Poetry, which we use for dependency management
      - name: Install Poetry
        run: pipx install poetry

      # Install all dependencies defined in pyproject.toml using make
      - name: Install dependencies
        run: |
          make install

      # Run the linter (pylint) to ensure code style and quality
      - name: Lint with pylint
        run: |
          make lint

      # Format the code using Black (autoformatter)
      - name: Format with black
        run: |
          make format

      # Type check the code using mypy
      - name: Type check the code
        run: |
          make type-checking

      # Run unit tests using pytest
      - name: Unit test with pytest
        run: |
          make tests

      # List the contents of the current directory (for debugging)
      - name: List directory
        run: ls -la

      # Print the environment variables to check that they are set correctly
      - name: Print variables
        run: |
          echo "Global Variable: ${{ env.GLOBAL_VARIABLE }}"
          echo "Job Variable: ${{ env.JOB_VARIABLE }}"

      # Setup DVC GitHub Action
      - name: Setup DVC
        uses: iterative/setup-dvc@v1
          
      # Run DVC pipeline
      - name: Run DVC pipeline
        run: dvc repro
